[4-1]
#include <GL/glut.h>
#include <GL/glu.h>
#include <math.h>

#define Pi 3.1415

void MyDisplay() {
	GLfloat Size[2], Angle;
	glClear(GL_COLOR_BUFFER_BIT);
	glColor3f(1.0, 1.0, 1.0);
	glGetFloatv(GL_POINT_SIZE_RANGE, Size);
	glPointSize(Size[0] * 3);
	glBegin(GL_POINTS);
	for (Angle = 0.0; Angle <= 2.0 * Pi; Angle += Pi / 20.0)
		glVertex3f(0.5 * cos(Angle), 0.5 * sin(Angle), 0.0);
	glEnd();
	glFlush();
}


int main(int argc, char** argv)
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_RGBA);
	glutInitWindowSize(300, 300);
	glutCreateWindow("Vertex Array");
	glutDisplayFunc(MyDisplay);
	glutMainLoop();
	return 0;
}


[4-2]
#include <GL/glut.h>
#include <math.h>


void MyDisplay() {
	glClear(GL_COLOR_BUFFER_BIT);
	glColor3f(0.5, 0.4, 0.3);
	glBegin(GL_POLYGON);
	glVertex3f(0.0, 0.5, 0.0); glVertex3f(-0.5, 0.25, 0.0);
	glVertex3f(-0.5, -0.25, 0.0); glVertex3f(0.0, -0.5, 0.0);
	glVertex3f(0.5, -0.25, 0.0); glVertex3f(0.5, 0.25, 0.0);
	glEnd();
	glFlush();
}


int main(int argc, char** argv)
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_RGBA);
	glutInitWindowSize(300, 300);
	glutCreateWindow("Graphics Primitvies");
	glutDisplayFunc(MyDisplay);
	glutMainLoop();
	return 0;
}


[4-4]
#include <GL/glut.h>
#include <GL/glu.h>

GLfloat MyVertices[8][3] = { {-0.25,-0.25,0.25}, {-0.25,0.25,0.25}, {0.25,0.25,0.25},
{0.25,-0.25,0.25}, {-0.25,-0.25,-0.25}, {-0.25,0.25,-0.25},
{0.25,0.25,-0.25}, {0.25,-0.25,-0.25} };

GLfloat MyColors[8][3] = { {0.2,0.2,0.2}, {1.0,0.0,0.0}, {1.0, 1.0, 0.0}, {0.0,1.0,0.0},
{0.0,0.0,1.0}, {1.0,0.0,1.0}, {1.0,1.0,1.0}, {0.0,1.0,1.0} };

GLubyte MyVertexList[24] = { 0,3,2,1, 3,7,6,2, 0,4,7,3, 1,2,6,5, 4,5,6,7, 0,1,5,4 };

void MyDisplay() {
	glClear(GL_COLOR_BUFFER_BIT);
	glFrontFace(GL_CCW); 
	glEnable(GL_CULL_FACE); 
	glEnableClientState(GL_COLOR_ARRAY); 
	glEnableClientState(GL_VERTEX_ARRAY); 
	glColorPointer(3, GL_FLOAT, 0, MyColors); 
	glVertexPointer(3, GL_FLOAT, 0, MyVertices); 
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	glRotatef(30.0, 1.0, 1.0, 1.0);
	for (GLint i = 0; i < 6; i++)
		glDrawElements(GL_POLYGON, 4, GL_UNSIGNED_BYTE, &MyVertexList[4 * i]);
	glFlush();
}



int main(int argc, char** argv)
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_RGBA);
	glutInitWindowSize(300, 300);
	glutCreateWindow("Vertex Array");
	glutDisplayFunc(MyDisplay);
	glutMainLoop();
	return 0;
}


/*
void MyDisplay() {
	glClear(GL_COLOR_BUFFER_BIT);

	glColor3f(1.0, 1.0, 1.0);
	glPointSize(3.0);
	glBegin(GL_POINTS);
	glVertex2f(0.0, 0.5);
	glVertex2f(-0.5, -0.5);
	glVertex2f(0.5, -0.5);
	glEnd();
	glFlush();
}
*/
//GL_POINTS

/*
void MyDisplay() {
	glClear(GL_COLOR_BUFFER_BIT);

	glColor3f(1.0, 1.0, 1.0);
	glPointSize(3.0);
	glBegin(GL_LINES);
	glVertex2f(0.0, 0.5);
	glVertex2f(-0.5, -0.5);
	glEnd();
	glFlush();
}
*/ //GL_LINES

/*
void MyDisplay() {
	glClear(GL_COLOR_BUFFER_BIT);

	glColor3f(1.0, 1.0, 1.0);
	glPointSize(3.0);
	glBegin(GL_LINE_STRIP);
	glVertex2f(0.0, 0.5);
	glVertex2f(-0.5, -0.5);
	glVertex2f(0.5, -0.5);
	glEnd();
	glFlush();
}
*/ //GL_LINE_STRIP

/*
void MyDisplay() {
	glClear(GL_COLOR_BUFFER_BIT);

	glColor3f(1.0, 1.0, 1.0);
	glPointSize(3.0);
	glBegin(GL_LINE_LOOP);
	glVertex2f(0.0, 0.5);
	glVertex2f(-0.5, -0.5);
	glVertex2f(0.5, -0.5);
	glEnd();
	glFlush();
}
*/ //GL_LINE_LOOP



/*
void MyDisplay()
{
	glClear(GL_COLOR_BUFFER_BIT);
	glColor3f(1, 0, 0);
	glBegin(GL_TRIANGLES);
	GLfloat x = -0.8;
	GLfloat y = 0.4;
	for (int i = 0; i < 6; i++) {
		glVertex2f(x, y);
		x += 0.3;
		y *= -1;
	}
	glEnd();
	glFlush();
}
*/ //GL_TRIANGLES



/*
void MyDisplay()
{
	glClear(GL_COLOR_BUFFER_BIT);
	glColor3f(1, 0, 0);
	glBegin(GL_TRIANGLE_STRIP);
	GLfloat x = -0.8;
	GLfloat y = 0.4;
	for (int i = 0; i < 6; i++) {
		if (i % 2 == 0) {
			glColor3f(1.0, 0, 0);
		}
		else {
			glColor3f(1.0, 0, 0);
		}
		glVertex2f(x, y);
		x += 0.3;
		y *= -1;
	}
	glEnd();
	glFlush();
}
*/ //GL_TRIANGLE_STRIP

/*
void MyDisplay()

{
	glClear(GL_COLOR_BUFFER_BIT);

	glBegin(GL_TRIANGLE_FAN);
	glColor3f(1.0, 0.0, 0.0);
	glVertex2f(0.0, 0.0);
	glVertex2f(0.0, 0.5);
	glVertex2f(-0.35, 0.35);

	glColor3f(1.0, 0.0, 0.0);
	glVertex2f(-0.5, 0.0);

	glColor3f(1.0, 0.0, 0.0);
	glVertex2f(-0.35, -0.35);

	glColor3f(1.0, 0.0, 0.0);
	glVertex2f(0.0, -0.5);
	glEnd();
	glFlush();
}
*/ // GL_TRIANGLE_FAN

/*
void MyDisplay()
{
	glClear(GL_COLOR_BUFFER_BIT);
	glBegin(GL_QUADS);
	glVertex2f(0.0, 0.5);
	glVertex2f(-0.5, 0.0);
	glVertex2f(0.0, -0.5);
	glVertex2f(0.5, 0.0);
	glEnd();
	glFlush();

}
*/ //GL_QUADS

/*
void MyDisplay()
{
	glClear(GL_COLOR_BUFFER_BIT);
	glBegin(GL_QUAD_STRIP);
	glVertex2f(0.0, 0.5);
	glVertex2f(-0.5, 0.0);
	glVertex2f(0.0, -0.5);
	glVertex2f(0.5, 0.0);
	glVertex2f(1.0, 0.5);
	glVertex2f(0.5, 0.0);
	glVertex2f(1.0, -0.5);
	glVertex2f(1.5, 0.0);
	glEnd();
	glFlush();

}
*/ // GL_QUAD_STRIP

/*
void MyDisplay()
{
	glClear(GL_COLOR_BUFFER_BIT);

	glBegin(GL_POLYGON);
	glVertex2f(0.0, 0.5);
	glVertex2f(-0.5, 0.0);
	glVertex2f(0.5, 0.0);
	glVertex2f(0.0, -0.5);
	glEnd();
	glFlush();
}
*/ //GL_POLYGON
